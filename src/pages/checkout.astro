---
import BaseLayout from "@/layouts/BaseLayout.astro";
import { getTotalCartItems } from "@/lib/cart";
import { getCollection } from "astro:content";

import Stripe from "stripe";

const PUBLIC_STRIPE_KEY = import.meta.env.PUBLIC_STRIPE_KEY;
const stripe = new Stripe(import.meta.env.SECRET_STRIPE_KEY);

const { origin } = Astro.url;

// get cart items cookies
const cartCookies = Astro.cookies.get("cartItems")?.value as unknown as string;

const totalCartItems = await getTotalCartItems(
  cartCookies ? JSON.parse(cartCookies) : []
);

// redirect if there are none
if (totalCartItems.length === 0) {
  return Astro.redirect("/");
}

// compose our line items
const lineItems = totalCartItems.map((item) => ({
  price: item.product.data.default_price,
  quantity: item.quantity,
}));

const checkoutSession = await stripe.checkout.sessions.create({
  ui_mode: "embedded",
  mode: "payment",
  line_items: lineItems,
  return_url: `${origin}/success?session_id={CHECKOUT_SESSION_ID}`,
  // automatic_tax: { enabled: true },
});
---

<BaseLayout>
  <div
    id="checkout"
    class="checkout-container"
    data-stripe-key={PUBLIC_STRIPE_KEY}
    data-client-secret={checkoutSession.client_secret}
  >
  </div>
</BaseLayout>

<script>
  import { loadStripe } from "@stripe/stripe-js";

  const checkoutContainer = document.querySelector(
    "#checkout"
  ) as HTMLDivElement;

  const { clientSecret, stripeKey } = checkoutContainer.dataset;

  if (!clientSecret || !stripeKey) {
    throw new Error("Error loading checkout");
  }

  const stripe = await loadStripe(stripeKey);

  const checkout = await stripe?.initEmbeddedCheckout({
    fetchClientSecret: () => Promise.resolve(clientSecret),
  });

  checkout?.mount("#checkout");
</script>
