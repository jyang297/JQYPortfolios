---
// src/pages/myProjects/[slug].astro
import { getCollection } from "astro:content";
import Layout from "@/layouts/Layout.astro";
import Heading from "@/components/ui/Heading.astro";

export async function getStaticPaths() {
  console.log("üîç Starting getStaticPaths...");
  
  try {
    const projectContents = await getCollection("projectContents");
    console.log("üìÑ Project contents found:", projectContents.length);
    
    if (projectContents.length === 0) {
      console.log("‚ö†Ô∏è No project contents found");
      return [];
    }
    
    // Log each project content in detail
    projectContents.forEach((project, index) => {
      console.log(`üìÑ Project ${index + 1}:`);
      console.log(`   - ID: ${project.id}`);
      console.log(`   - Slug: ${project.slug}`);
      console.log(`   - Title: ${project.data?.title || 'No title'}`);
      console.log(`   - Has render method: ${typeof project.render === 'function'}`);
    });
    
    const paths = projectContents.map((project) => {
      const slug = project.slug || project.id;
      console.log(`üîó Creating path for slug: "${slug}"`);
      return {
        params: { slug },
        props: { project }, // Pass the whole project object - it has .render() method
      };
    });
    
    console.log("‚úÖ Final generated paths:", paths.map(p => p.params.slug));
    return paths;
    
  } catch (error) {
    console.error("‚ùå Unexpected error in getStaticPaths:", error);
    return [];
  }
}

const { project } = Astro.props;

// Add error checking
if (!project) {
  throw new Error("No project data received");
}

// Check if we have pre-rendered HTML (Astro v5) or need to render (older versions)
let htmlContent;
if (project.rendered?.html) {
  // Astro v5+ - content is pre-rendered
  htmlContent = project.rendered.html;
  console.log("‚úÖ Using pre-rendered HTML content");
} else if (typeof project.render === 'function') {
  // Older Astro versions - need to render
  const { Content } = await project.render();
  htmlContent = Content;
  console.log("‚úÖ Using rendered content");
} else {
  console.error("‚ùå Project object:", project);
  throw new Error("No content available - neither pre-rendered HTML nor render method found");
}
---

<Layout title={project.data.title}>
  <article class="container py-16 max-w-4xl mx-auto">
    <header class="mb-12">
      <Heading tagName="h1" tagSize="h1" class="mb-4">
        {project.data.title}
      </Heading>
      
      {project.data.description && (
        <p class="text-lg text-gray-700 leading-relaxed mb-6">
          {project.data.description}
        </p>
      )}
    </header>

    <div class="prose prose-lg prose-slate max-w-none prose-headings:text-gray-900 prose-headings:font-bold prose-h1:text-4xl prose-h2:text-2xl prose-h3:text-xl prose-p:text-gray-700 prose-p:leading-relaxed prose-li:text-gray-700 prose-strong:text-gray-900 prose-code:text-pink-600 prose-code:bg-gray-100 prose-code:px-1 prose-code:py-0.5 prose-code:rounded prose-pre:bg-gray-900 prose-pre:text-gray-100 prose-blockquote:border-l-4 prose-blockquote:border-blue-500 prose-blockquote:pl-4 prose-blockquote:italic prose-a:text-blue-600 prose-a:no-underline hover:prose-a:underline">
      {project.rendered?.html ? (
        <div set:html={project.rendered.html} />
      ) : (
        <Content />
      )}
    </div>

    <div class="mt-16 pt-8 border-t border-gray-200">
      <a 
        href="/#featured-projects" 
        class="inline-flex items-center gap-2 text-blue-600 hover:text-blue-800 transition-colors"
      >
        <span>‚Üê</span>
        Back to Projects
      </a>
    </div>
  </article>
</Layout>